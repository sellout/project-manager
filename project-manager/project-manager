#!/usr/bin/env bash

# Prepare to use tools from Nixpkgs.
PATH=@DEP_PATH@${PATH:+:}$PATH

## See sellout/bash-strict-mode#10 for why we can’t use `strict-bash` directly.
# shellcheck disable=SC1091
source strict-mode.bash

export TEXTDOMAIN=project-manager
export TEXTDOMAINDIR=@OUT@/share/locale

# shellcheck disable=1091
source @PROJECT_MANAGER_LIB@

function showHelp() {
  ## NB: This output is intentionally over-wide. It’s set to 80 columns in the          |
  ##     output, so each line can have content until column 89 (including the           |
  ##     closing quote, aligned with the bars to the right of this comment)             |
  ##     because it is indented 8 columns.                                              |
  echo "Usage: $0 [OPTION] COMMAND"
  echo
  echo "Options"
  echo
  echo "  -f FILE           The project configuration file."
  echo "                    Default is '\$PROJECT_ROOT/.config/project/default.nix'."
  echo "  -I PATH           Add a path to the Nix expression search path."
  echo "  -v                Verbose output"
  echo "  -n                Do a dry run, only prints what actions would be taken"
  echo "  -h                Print this help"
  echo "  --version         Print the Project Manager version"
  echo
  echo "Options passed on to nix-build(1)"
  echo
  echo "  --arg(str) NAME VALUE    Override inputs passed to project-manager.nix"
  echo "  --cores NUM"
  echo "  --debug"
  echo "  --impure"
  echo "  --keep-failed"
  echo "  --keep-going"
  echo "  -j, --max-jobs NUM"
  echo "  --option NAME VALUE"
  echo "  -L, --print-build-logs"
  echo "  --show-trace"
  echo "  --(no-)substitute"
  echo "  --no-out-link            Do not create a symlink to the output path"
  echo "  --no-write-lock-file"
  echo "  --builders VALUE"
  echo "  --refresh                Consider all previously downloaded files out-of-date"
  echo
  echo "Note: Some commands pass arbitrary arguments to some underlying command (for"
  echo "      example, ‘format’ will pass everything Project Manager doesn’t understand"
  echo "      to the formatter specified in the flake). These commands include ‘[ARG …]’"
  echo "      in their summary."
  echo
  echo "Commands"
  echo
  echo "  help"
  echo "      Print this help"
  echo
  echo "  kitchen-sink [ARG …]"
  echo "  ks [ARG …]"
  echo "      Run all of the file-updating subcommands (currently ‘switch’ then"
  echo "     ‘format’) to get things updated in one fell swoop. Note that ‘ARG …’ are"
  echo "      passed to the ‘format’ command and don’t affect ‘switch’."
  echo
  echo "  edit"
  echo '      Open the project configuration in $EDITOR (currently'
  echo "     ‘${EDITOR}’)"
  echo
  echo "  build"
  echo "      Build configuration into result directory"
  echo
  echo "  init [--switch] [DIR] [ARG …]"
  echo "      Initializes a configuration in the given directory. If the directory does"
  echo "      not exist, then it will be created. The default directory is"
  echo "     ‘~/.config/project-manager’."
  echo
  echo "      --switch      Immediately activate the generated configuration."
  echo
  echo "  switch"
  echo "      Build and activate configuration"
  echo
  echo "  generations"
  echo "      List all project environment generations"
  echo
  echo "  remove-generations ID … [ARG …]"
  echo "      Remove indicated generations. Use 'generations' command to find suitable"
  echo "      find suitable generation numbers."
  echo
  echo "  expire-generations TIMESTAMP [ARG …]"
  echo "      Remove generations older than TIMESTAMP where TIMESTAMP is"
  echo '      interpreted as in the -d argument of the date tool. For example "-30 days"'
  echo '      or "2018-01-01".'
  echo
  echo "  packages"
  echo "      List all packages installed in project-manager-path"
  echo
  echo "  format [ARG …]"
  echo "  fmt [ARG …]"
  echo "      Run the configured formatter. This is usually much faster than running"
  echo "     ‘nix fmt’ because it avoids evaluating the flake."
  echo
  echo "  news"
  echo "      Show news entries in a pager"
  echo
  echo "  uninstall"
  echo "      Remove Project Manager"
}

EXTRA_NIX_PATH=()
PASSTHROUGH_OPTS=()
COMMAND=""
COMMAND_ARGS=()

while [[ $# -gt 0 ]]; do
  opt="$1"
  shift
  case $opt in
    build | init | edit | expire-generations | generations | format | \
      kitchen-sink | help | news | packages | remove-generations | switch | \
      uninstall)
      COMMAND="$opt"
      ;;
    fmt)
      COMMAND="format"
      ;;
    ks)
      COMMAND="kitchen-sink"
      ;;
    -I)
      EXTRA_NIX_PATH+=("$1")
      shift
      ;;
    -f | --file)
      export PROJECT_MANAGER_CONFIG="$1"
      shift
      ;;
    --recreate-lock-file | --no-update-lock-file | --no-write-lock-file | \
      --no-registries | --commit-lock-file | --refresh)
      PASSTHROUGH_OPTS+=("$opt")
      ;;
    --update-input)
      PASSTHROUGH_OPTS+=("$opt" "$1")
      shift
      ;;
    --override-input)
      PASSTHROUGH_OPTS+=("$opt" "$1" "$2")
      shift 2
      ;;
    --experimental-features)
      PASSTHROUGH_OPTS+=("$opt" "$1")
      shift
      ;;
    --extra-experimental-features)
      PASSTHROUGH_OPTS+=("$opt" "$1")
      shift
      ;;
    --no-out-link)
      export NO_OUT_LINK=1
      ;;
    -L | --print-build-logs)
      export PRINT_BUILD_LOGS=1
      ;;
    -h | --help)
      showHelp
      exit 0
      ;;
    -n | --dry-run)
      export DRY_RUN=1
      ;;
    --option | --arg | --argstr)
      PASSTHROUGH_OPTS+=("$opt" "$1" "$2")
      shift 2
      ;;
    -j | --max-jobs | --cores | --builders)
      PASSTHROUGH_OPTS+=("$opt" "$1")
      shift
      ;;
    --debug | --eval-cache | --no-eval-cache | --keep-failed | --keep-going | --show-trace | --substitute | --no-substitute | --impure)
      PASSTHROUGH_OPTS+=("$opt")
      ;;
    -v | --verbose)
      export VERBOSE=1
      ;;
    --version)
      echo @VERSION@
      exit 0
      ;;
    *)
      case $COMMAND in
        init | expire-generations | remove-generations | format | kitchen-sink)
          COMMAND_ARGS+=("$opt")
          ;;
        *)
          _iError "%s: unknown option '%s'" "$0" "$opt" >&2
          _i "Run '%s --help' for usage help" "$0" >&2
          exit 1
          ;;
      esac
      ;;
  esac
done

if [[ -z $COMMAND ]]; then
  showHelp >&2
  exit 1
fi

case $COMMAND in
  edit)
    pm_edit
    ;;
  build)
    pm_build
    ;;
  init)
    pm_init "${COMMAND_ARGS[@]}"
    ;;
  kitchen-sink)
    pm_switch
    pm_format "${COMMAND_ARGS[@]}"
    ;;
  switch)
    pm_switch
    ;;
  generations)
    pm_listGenerations
    ;;
  remove-generations)
    pm_removeGenerations "${COMMAND_ARGS[@]}"
    ;;
  expire-generations)
    if [[ ${#COMMAND_ARGS[@]} != 1 ]]; then
      _i 'expire-generations expects one argument, got %d.' "${#COMMAND_ARGS[@]}" >&2
      exit 1
    else
      pm_expireGenerations "${COMMAND_ARGS[@]}"
    fi
    ;;
  packages)
    pm_listPackages
    ;;
  format)
    pm_format "${COMMAND_ARGS[@]}"
    ;;
  news)
    pm_showNews --all
    ;;
  uninstall)
    pm_uninstall
    ;;
  help)
    showHelp
    ;;
  *)
    _iError 'Unknown command: %s' "$COMMAND" >&2
    showHelp >&2
    exit 1
    ;;
esac

# vim: ft=bash
